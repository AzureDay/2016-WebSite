@using TeamSpark.AzureDay.WebSite.Data.Enum
@model TeamSpark.AzureDay.WebSite.Host.Models.Profile.MyProfileModel

@{
	ViewBag.Title = "AzureDay 2016 - личный кабинет";
}

<div class="boxedcontent">
	@Html.Action("Header", "Layout")

	<div class="container">
		<div class="row">
			<div class="col-md-12">

				<div>
					&nbsp;
				</div>

				<h1>Личный кабинет участника <span class='colortext'>AZUREday</span></h1>

				<div id="divProfile" class="col-md-6">
					<h2>Мои данные</h2>
					<form method="POST" data-bind="submit: showModal">

						<div class="input-group myInputGroupdivider">
							<span class="input-group-addon" style="width: 150px;">Email</span>
							<input class="form-control" name="email" readonly="readonly" disabled="disabled" value="@Model.Email" style="width: 250px;"/>
						</div>
						<div class="input-group myInputGroupdivider">
							<span class="input-group-addon" style="width: 150px;">Имя</span>
							<input class="form-control" name="firstName" data-bind="textInput: fName" placeholder="Имя" value="@Model.FirstName" style="width: 250px;"/>
						</div>
						<div class="input-group myInputGroupdivider">
							<span class="input-group-addon" style="width: 150px;">Фамилия</span>
							<input class="form-control" name="lastName" data-bind="textInput: lName" placeholder="Фамилия" value="@Model.LastName" style="width: 250px;"/>
						</div>
						<div class="input-group myInputGroupdivider">
							<span class="input-group-addon" style="width: 150px;">Компания</span>
							<input class="form-control" name="company" data-bind="textInput: company" placeholder="Компания" value="@Model.Company" style="width: 250px;"/>
						</div>

						<button class="btn btn-primary" type="submit" data-bind="enable: isModelValid">Сохранить</button>

						<div style="width: 400px; margin-top: 15px; display: none;" class="alert alert-warning" data-bind="style: { display: isModelValid() ? 'none' : 'block' }">Все поля обязательны для заполнения</div>

					</form>
				</div>

				<div id="divTicket" class="col-md-6">
					<h2>Мой билет</h2>

					<div style="display: none;">
						<p>
							Продажа билетов будет открыта в ближайшие дни.
						</p>
						<p>
							Если вы успели зарегистрироваться и видите это сообщение, то мы подарим вам <span class='colortext'>промокод на 10% скидки</span> на один билет на конференцию, как только будет открыта продажа билетов.
						</p>
					</div>

					@if (Model.PayedTicket == null)
					{
						<div>
							<form method="POST" action="/profile/pay">
								<div class="input-group myInputGroupdivider">
									<span class="input-group-addon" style="width: 150px;">Тип билета</span>
									<select class="form-control" name="ticketType" data-bind="options: tickets, optionsValue: 'id', optionsText: 'title', value: selectedTicket" style="width: 250px;"></select>
								</div>
								<div class="input-group myInputGroupdivider">
									<span class="input-group-addon" style="width: 150px;">Промо код</span>
									<input class="form-control" name="promoCode" placeholder="Промо код" data-bind="textInput: promoCode" style="width: 250px;" />
								</div>
								<div class="input-group myInputGroupdivider">
									<span class="input-group-addon" style="width: 150px;">Стоимость</span>
									<input class="form-control" readonly="readonly" disabled="disabled" data-bind="value: currentPrice" style="width: 250px;" />
								</div>
								<button class="btn btn-primary" type="submit">Оплатить</button>
								@foreach (var ticket in Model.Tickets.Where(t => !string.IsNullOrEmpty(t.TicketNotes)))
								{
									<div style="width: 400px; margin-top: 15px; display: none;" data-bind="visible: '@ticket.TicketType' == selectedTicket()" class="alert alert-warning">@ticket.TicketNotes</div>
								}
							</form>
						</div>
					}
					else
					{
						<div>
							<div class="wow-pricing-table col-md-12">
								<div class="wow-pricing featured wow-column-">
									<div class="wow-pricing-header" style="padding-bottom: 0px;">
										<h5>AzureDay 2016</h5>
										<div class="wow-pricing-cost">
											<img id="imgGravatar" style="display: none; padding-bottom: 10px;" />
											<p style="font-weight: bold;">@string.Format("{0} {1}", Model.FirstName, Model.LastName)</p>
											<p>@Model.Company</p>
											<p>&nbsp;</p>
										</div>
									</div>
									<div class="wow-pricing-content">
										<ul>
											<li>
												Участник (@Model.PayedTicket.TicketType.ToDisplayString())
											</li>
										</ul>
									</div>
								</div>
							</div>
						</div>
					}

				</div>
			</div>
		</div>
	</div>

	@Html.Action("Footer", "Layout")

	@Html.Partial("_ModalWait")

</div>

@section Scripts
{
	@Scripts.Render("~/cdn/knockout/js")

	<script>
		$(document).ready(function() {
			(function profile() {
				var profileModel = {
					fName: ko.observable('@Model.FirstName'),
					lName: ko.observable('@Model.LastName'),
					company: ko.observable('@Model.Company')
				};

				profileModel.isModelValid = ko.computed(function() {
					var fName = profileModel.fName();
					var lName = profileModel.lName();
					var company = profileModel.company();

					return !!fName && !!lName && !!company;
				});

				profileModel.showModal = function() {
					setTimeout(function() {
						modal.showModal();
					});
					return true;
				}

				ko.applyBindings(profileModel, document.getElementById('divProfile'));
			})();

			(function ticket() {
				var ticketModel = {
					tickets: ko.observableArray([
						@Html.Raw(string.Join(",", Model.Tickets.Select(ticket => string.Format("{{ id:'{0}', title:'{1}' }}", ticket.TicketType, ticket.TicketName))))
					]),
					selectedTicket: ko.observable(),
					promoCode: ko.observable(),
					currentPrice: ko.observable()
				};

				function calculateNewPrice(ticketType, promoCode) {
					$.get('/api/tickets/price?ticketType=' + ticketType + '&promoCode=' + promoCode, function(data) {
						ticketModel.currentPrice(data + ' грн.');
					});
				}

				ticketModel.promoCode.subscribe(function(newPromoCode) {
					ticketModel.currentPrice(null);
					calculateNewPrice(ticketModel.selectedTicket(), newPromoCode);
				});

				ticketModel.selectedTicket.subscribe(function(newTicket) {
					ticketModel.currentPrice(null);
					calculateNewPrice(newTicket, ticketModel.promoCode());
				});

				ko.applyBindings(ticketModel, document.getElementById('divTicket'));
			})();
		});

		function renderGravatarProfile(profile) {
			if (!profile || !profile.entry || !profile.entry[0]) {
				return;
			}

			var img = $('#imgGravatar');
			img.attr('src', profile.entry[0].thumbnailUrl);
			img.show();
		}
	</script>

	<script src="@string.Format("https://www.gravatar.com/{0}.json?callback=renderGravatarProfile", Model.EmailHash.ToLower())"></script>
}